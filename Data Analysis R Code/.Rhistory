}
}
} else {
# If in wide format
possible_device_cols <- c("bracelet", "necklace", "overear",
"Bracelet", "Necklace", "Overear")
available_devices <- intersect(names(rlsummary), possible_device_cols)
if (length(available_devices) > 0) {
for (device_col in available_devices) {
device_name <- tolower(device_col)
# Create temporary dataset with just this device
device_data <- rlsummary %>%
mutate(PID = as.numeric(as.character(PID))) %>%
select(PID, !!sym(device_col)) %>%
rename(Accuracy = !!sym(device_col)) %>%
inner_join(questionnaire_data %>% select(PID, Q58), by = "PID") %>%
filter(!is.na(Accuracy))
if (nrow(device_data) > 5) {
model <- lm(Accuracy ~ Q58, data = device_data)
wrist_effects <- rbind(wrist_effects, data.frame(
Device = device_name,
Measure = "Relative Localization  Accuracy",
Estimate = coef(model)["Q58"],
SE = summary(model)$coefficients["Q58", "Std. Error"],
p_value = summary(model)$coefficients["Q58", "Pr(>|t|)"]
))
}
}
}
}
# Create meaningful labels for the plot
wrist_effects$Significance <- ifelse(wrist_effects$p_value < 0.05, "Significant", "Non-significant")
wrist_effects$Label <- paste(wrist_effects$Device, "-", wrist_effects$Measure)
wrist_effects$Label <- factor(wrist_effects$Label,
levels = wrist_effects$Label[order(wrist_effects$Measure, wrist_effects$Device)])
# Use device-specific colors
device_colors <- c("bracelet" = "#FA8072", "necklace" = "#66BB6A", "overear" = "#5C9CFA")
# Create forest plot of all device-specific effects for wrist size
if (nrow(wrist_effects) > 0) {
p <- ggplot(wrist_effects, aes(x = Label, y = Estimate, color = Device, shape = Significance)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE), width = 0.3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Effect of Wrist Size on Different Measures by Device",
subtitle = "Coefficients from linear models with 95% confidence intervals",
x = "",
y = "Estimate of Wrist Size Effect") +
scale_color_manual(values = device_colors) +
scale_shape_manual(values = c("Significant" = 16, "Non-significant" = 1)) +
coord_flip() +
facet_grid(Measure ~ ., scales = "free_y", space = "free") +
theme_minimal() +
theme(
legend.position = "right",
strip.text = element_text(face = "bold"),
panel.spacing = unit(1, "lines"),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
print(p)
} else {
cat("Insufficient data for combined visualization\n")
}
# Display the data table with all effects
print(wrist_effects)
# Load required libraries
library(tidyverse)
library(ggplot2)
library(lme4)
library(car)
# Display summary statistics for age
cat("Summary of age (Age):\n")
summary(questionnaire_data$Age)
cat("\nStandard deviation:", sd(questionnaire_data$Age, na.rm = TRUE), "\n")
# Ensure PIDs are numeric type for joining
questionnaire_data$PID <- as.numeric(questionnaire_data$PID)
#-----------------------------------------------------------------
# DEVICE-SPECIFIC ANALYSIS
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# 1. ABSOLUTE THRESHOLD ANALYSIS BY DEVICE
#-----------------------------------------------------------------
cat("\n\n=== AGE EFFECT ON ABSOLUTE THRESHOLD BY DEVICE ===\n")
# PID as character
threshold_results_filtered$PID <- as.character(threshold_results_filtered$PID)
questionnaire_data$PID <- as.character(questionnaire_data$PID)
# Merge threshold data with questionnaire data
threshold_with_age <- threshold_results_filtered %>%
inner_join(questionnaire_data %>% select(PID, Age), by = "PID")
# Check the merged dataset
cat("\nRows in merged threshold data:", nrow(threshold_with_age), "\n")
# Device-specific models for threshold data
for (device in unique(threshold_with_age$device_type)) {
device_data <- threshold_with_age %>% filter(device_type == device)
cat("\n--- Absolute Threshold: Device =", device, "---\n")
cat("Number of observations:", nrow(device_data), "\n")
if (nrow(device_data) > 5) {  # Only run if we have enough data
# Summary statistics
cat("Summary statistics for this device:\n")
print(summary(device_data$Threshold))
device_data$Age <- as.numeric(device_data$Age)
# Correlation test
cor_test <- cor.test(device_data$Age, device_data$Threshold)
cat("\nCorrelation between age and threshold:\n")
cat("r =", round(cor_test$estimate, 3), ", p =", round(cor_test$p.value, 3), "\n")
# Linear model
device_model <- lm(Threshold ~ Age, data = device_data)
cat("\nLinear model for this device:\n")
print(summary(device_model))
device_data$Age <- as.numeric(device_data$Age)
# Plot
p <- ggplot(device_data, aes(x = Age, y = Threshold)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Age vs Threshold -", device),
x = "Age (years)",
y = "Threshold") +
theme_minimal()
print(p)
} else {
cat("Insufficient data for analysis\n")
}
}
#-----------------------------------------------------------------
# 2. LOCALIZATION ACCURACY ANALYSIS BY DEVICE
#-----------------------------------------------------------------
cat("\n\n=== AGE EFFECT ON LOCALIZATION ACCURACY BY DEVICE ===\n")
# Verify structure of localization summary data
cat("Structure of loc_summary:\n")
str(loc_summary)
# Ensure PIDs are character type
questionnaire_data$PID <- as.numeric(questionnaire_data$PID)
rlsummary$PID <- as.numeric(rlsummary$PID)
# Merge localization data with questionnaire data
# Check if data is already in long format with device_type column
if ("device_type" %in% names(rlsummary)) {
# Data is already in long format
rlwith_age <- rlsummary %>%
inner_join(questionnaire_data %>% select(PID, Age), by = "PID")
} else {
# Option 2: If data is in wide format
possible_device_cols <- c("bracelet", "necklace", "overear",
"Bracelet", "Necklace", "Overear")
device_cols <- intersect(names(rlsummary), possible_device_cols)
if (length(device_cols) > 0) {
# Convert to long format
rlwith_age <- rlsummary %>%
inner_join(questionnaire_data %>% select(PID, Age), by = "PID") %>%
pivot_longer(
cols = all_of(device_cols),
names_to = "device_type",
values_to = "Accuracy"
) %>%
filter(!is.na(Accuracy))
# Ensure device_type is lowercase
rlwith_age$device_type <- tolower(rlwith_age$device_type)
} else {
cat("Warning: Could not identify device columns in rlsummary\n")
print(names(rlsummary))
# Create empty dataframe
rlwith_age <- data.frame(
PID = character(),
device_type = character(),
Accuracy = numeric(),
Age = numeric()
)
}
}
# Device-specific models for localization data
for (device in unique(loc_long$device_type)) {
device_data <- loc_long %>% filter(device_type == device)
cat("\n--- Localization Accuracy: Device =", device, "---\n")
cat("Number of observations:", nrow(device_data), "\n")
# Debug: Check if Age column exists
cat("Columns in device_data:", paste(names(device_data), collapse=", "), "\n")
if (nrow(device_data) > 5) {
# Summary statistics
cat("Summary statistics for this device:\n")
print(summary(device_data$Accuracy))
device_data$Accuracy <- as.numeric(device_data$Accuracy)
# Check if Age column exists
if ("Age" %in% names(device_data)) {
# Try to convert Age to numeric
temp_age <- suppressWarnings(as.numeric(as.character(device_data$Age)))
# Check if conversion worked
if (all(is.na(temp_age))) {
cat("Error: Failed to convert Age to numeric - all values became NA\n")
# Debug info
cat("First few values of Age column:\n")
print(head(device_data$Age))
} else if (length(temp_age) == 0) {
cat("Error: Age column exists but has length 0\n")
} else {
# Assign converted values
device_data$Age <- temp_age
# Proceed with analysis
# Correlation test
cor_test <- cor.test(device_data$Age, device_data$Accuracy)
cat("\nCorrelation between age and accuracy:\n")
cat("r =", round(cor_test$estimate, 3), ", p =", round(cor_test$p.value, 3), "\n")
# Linear model
device_model <- lm(Accuracy ~ Age, data = device_data)
cat("\nLinear model for this device:\n")
print(summary(device_model))
# Plot
p <- ggplot(device_data, aes(x = Age, y = Accuracy)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Age vs Localization Accuracy -", device),
x = "Age (years)",
y = "Accuracy") +
theme_minimal()
print(p)
}
} else {
cat("Error: Age column does not exist in the dataset\n")
# Alternative: Try to join with questionnaire data here
cat("Attempting to join with questionnaire data to get Age...\n")
# Check if PID exists for joining
if ("PID" %in% names(device_data) && "PID" %in% names(questionnaire_data) && "Age" %in% names(questionnaire_data)) {
# Convert PIDs to same type
device_data$PID <- as.character(device_data$PID)
questionnaire_data_temp <- questionnaire_data %>%
select(PID, Age) %>%
mutate(PID = as.character(PID))
# Join
device_data <- device_data %>%
left_join(questionnaire_data_temp, by = "PID")
cat("After joining, rows:", nrow(device_data), "\n")
cat("Age column exists after join:", "Age" %in% names(device_data), "\n")
# Check if we have Age values
if ("Age" %in% names(device_data) && sum(!is.na(device_data$Age)) > 5) {
# Convert Age to numeric
device_data$Age <- as.numeric(as.character(device_data$Age))
# Now try analysis again
# Correlation test
cor_test <- cor.test(device_data$Age, device_data$Accuracy, use = "complete.obs")
cat("\nCorrelation between age and accuracy:\n")
cat("r =", round(cor_test$estimate, 3), ", p =", round(cor_test$p.value, 3), "\n")
# Linear model
device_model <- lm(Accuracy ~ Age, data = device_data)
cat("\nLinear model for this device:\n")
print(summary(device_model))
# Plot
p <- ggplot(device_data, aes(x = Age, y = Accuracy)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Age vs Localization Accuracy -", device),
x = "Age (years)",
y = "Accuracy") +
theme_minimal()
print(p)
} else {
cat("Still insufficient Age data after join\n")
}
} else {
cat("Missing required columns for join\n")
}
}
} else {
cat("Insufficient data for analysis\n")
}
}
#-----------------------------------------------------------------
# 3. Relative Localization    ANALYSIS BY DEVICE
#-----------------------------------------------------------------
cat("\n\n=== AGE EFFECT ON Relative Localization    BY DEVICE ===\n")
# Verify structure of Relative Localization  summary data
cat("Structure of rlsummary:\n")
str(rlsummary)
cat("\nColumn names in rlsummary:\n")
print(names(rlsummary))
# Apply same logic as with localization data
threshold_results_filtered$PID <- as.character(threshold_results_filtered$PID)
questionnaire_data$PID <- as.character(questionnaire_data$PID)
# Convert both PIDs to the same type before joining
rlsummary$PID <- as.character(rlsummary$PID)
questionnaire_data$PID <- as.character(questionnaire_data$PID)
# Now perform the join with matching types
rlwith_age <- rlsummary %>%
inner_join(questionnaire_data %>% select(PID, Age), by = "PID")
# Device-specific models for Relative Localization  data
for (device in unique(rlwith_age$device_type)) {
device_data <- rlwith_age %>% filter(device_type == device)
cat("\n--- Relative Localization   : Device =", device, "---\n")
cat("Number of observations:", nrow(device_data), "\n")
if (nrow(device_data) > 5) {
# Summary statistics
cat("Summary statistics for this device:\n")
print(summary(device_data$Accuracy))
device_data$Accuracy <- as.numeric(device_data$Accuracy)
device_data$Age <- as.numeric(as.character(device_data$Age))
# Correlation test
cor_test <- cor.test(device_data$Age, device_data$Accuracy)
cat("\nCorrelation between age and accuracy:\n")
cat("r =", round(cor_test$estimate, 3), ", p =", round(cor_test$p.value, 3), "\n")
# Linear model
device_model <- lm(Accuracy ~ Age, data = device_data)
cat("\nLinear model for this device:\n")
print(summary(device_model))
# Plot
p <- ggplot(device_data, aes(x = Age, y = Accuracy)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Age vs Relative Localization    Accuracy -", device),
x = "Age (years)",
y = "Accuracy") +
theme_minimal()
print(p)
} else {
cat("Insufficient data for analysis\n")
}
}
#-----------------------------------------------------------------
# 4. COMBINED VISUALIZATION OF AGE EFFECTS
#-----------------------------------------------------------------
cat("\n\n=== COMBINED VISUALIZATION OF AGE EFFECTS ===\n")
# Initialize a dataframe to store all device-specific effects
age_effects <- data.frame(
Device = character(),
Measure = character(),
Estimate = numeric(),
SE = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# Collect threshold effects
for (device in unique(threshold_with_age$device_type)) {
device_data <- threshold_with_age %>% filter(device_type == device)
# Convert Age to numeric
device_data$Age <- as.numeric(as.character(device_data$Age))
if (nrow(device_data) > 5) {
model <- lm(Threshold ~ Age, data = device_data)
# Extract coefficient information - use safe indexing
coef_df <- as.data.frame(summary(model)$coefficients)
# Add to age_effects dataframe
age_effects <- rbind(age_effects, data.frame(
Device = device,
Measure = "Absolute Threshold",
Estimate = coef_df["Age", "Estimate"],
SE = coef_df["Age", "Std. Error"],
p_value = coef_df["Age", "Pr(>|t|)"]
))
}
}
# Collect localization effects
for (device in unique(loc_long$device_type)) {
# First merge with questionnaire data to get Age
device_data <- loc_long %>%
filter(device_type == device) %>%
# Convert PID to character for joining
mutate(PID = as.character(PID)) %>%
# Join with questionnaire data to get Age
inner_join(questionnaire_data %>%
select(PID, Age) %>%
mutate(PID = as.character(PID)),
by = "PID")
cat("\n--- Localization data for device:", device, "---\n")
cat("Rows after merging with questionnaire data:", nrow(device_data), "\n")
cat("Columns in merged data:", paste(names(device_data), collapse=", "), "\n")
if (nrow(device_data) > 5) {
# Convert Age to numeric
device_data$Age <- as.numeric(as.character(device_data$Age))
device_data$Accuracy <- as.numeric(device_data$Accuracy)
# Remove NA values
device_data <- device_data %>% filter(!is.na(Age), !is.na(Accuracy))
cat("Rows after removing NA values:", nrow(device_data), "\n")
if (nrow(device_data) > 5) {
# Fit model
model <- try(lm(Accuracy ~ Age, data = device_data), silent = TRUE)
if (!inherits(model, "try-error")) {
# Get coefficient table
coef_table <- summary(model)$coefficients
# Add to age_effects using position indexing
age_effects <- rbind(age_effects, data.frame(
Device = device,
Measure = "Localization Accuracy",
Estimate = coef_table[2, 1],  # Age coefficient estimate
SE = coef_table[2, 2],        # Standard error
p_value = coef_table[2, 4]    # p-value
))
cat("Successfully added", device, "to age_effects\n")
} else {
cat("Error fitting model for device", device, "\n")
}
} else {
cat("Insufficient data after removing NAs\n")
}
} else {
cat("Insufficient data for analysis\n")
}
}
# Collect Relative Localization  effects
for (device in unique(rlwith_age$device_type)) {
device_data <- rlwith_age %>%
filter(device_type == device) %>%
# Convert Age to numeric
mutate(Age = as.numeric(as.character(Age))) %>%
# Remove rows with NA
filter(!is.na(Age), !is.na(Accuracy))
if (nrow(device_data) > 5) {
# Fit model
model <- lm(Accuracy ~ Age, data = device_data)
# Get coefficient table
coef_table <- summary(model)$coefficients
# Use position indexing instead of name indexing for reliability
age_effects <- rbind(age_effects, data.frame(
Device = device,
Measure = "Relative Localization  Accuracy",
Estimate = coef_table[2, 1],  # Age coefficient estimate (2nd row, 1st column)
SE = coef_table[2, 2],        # Standard error (2nd row, 2nd column)
p_value = coef_table[2, 4]    # p-value (2nd row, 4th column)
))
}
}
# Create meaningful labels for the plot
age_effects$Significance <- ifelse(age_effects$p_value < 0.05, "Significant", "Non-significant")
age_effects$Label <- paste(age_effects$Device, "-", age_effects$Measure)
age_effects$Label <- factor(age_effects$Label, levels = age_effects$Label[order(age_effects$Measure, age_effects$Device)])
# Create forest plot of all device-specific effects
if (nrow(age_effects) > 0) {
# Use device-specific colors
device_colors <- c("bracelet" = "#FA8072", "necklace" = "#66BB6A", "overear" = "#5C9CFA")
p <- ggplot(age_effects, aes(x = Label, y = Estimate, color = Device, shape = Significance)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE), width = 0.3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Effect of Age on Different Measures by Device",
x = "",
y = "Estimate of Age Effect (with 95% CI)") +
scale_color_manual(values = device_colors) +
scale_shape_manual(values = c("Significant" = 16, "Non-significant" = 1)) +
coord_flip() +
facet_grid(Measure ~ ., scales = "free_y", space = "free") +
theme_minimal() +
theme(
legend.position = "right",
strip.text = element_text(face = "bold"),
panel.spacing = unit(1, "lines"),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
print(p)
} else {
cat("Insufficient data for combined visualization\n")
}
# Display the data table with all effects
print(age_effects)
#-----------------------------------------------------------------
# 5. INVESTIGATING AGE AS A CONFOUNDING VARIABLE
#-----------------------------------------------------------------
cat("\n\n=== INVESTIGATING AGE AS A CONFOUNDING VARIABLE ===\n")
questionnaire_data$Age <- as.numeric(as.character(questionnaire_data$Age))
# Check correlations between age and anatomical measurements
age_neck_cor <- cor.test(questionnaire_data$Age, questionnaire_data$Q55, use = "pairwise.complete.obs")
age_wrist_cor <- cor.test(questionnaire_data$Age, questionnaire_data$Q58, use = "pairwise.complete.obs")
cat("\nCorrelation between age and neck size:\n")
cat("r =", round(age_neck_cor$estimate, 3), ", p =", round(age_neck_cor$p.value, 3), "\n")
cat("\nCorrelation between age and wrist size:\n")
cat("r =", round(age_wrist_cor$estimate, 3), ", p =", round(age_wrist_cor$p.value, 3), "\n")
# Scatter plots to visualize these relationships
p1 <- ggplot(questionnaire_data, aes(x = Age, y = Q55)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Age and Neck Size",
x = "Age (years)",
y = "Neck Circumference (cm)") +
theme_minimal()
p2 <- ggplot(questionnaire_data, aes(x = Age, y = Q58)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Age and Wrist Size",
x = "Age (years)",
y = "Wrist Circumference (cm)") +
theme_minimal()
print(p1)
print(p2)
# Run multiple regression models for each device to see if age and anatomical
# measurements have independent effects (using absolute threshold as example)
cat("\n=== Multiple regression: Age + Anatomical Measurements ===\n")
# For each device type, run models with both age and neck/wrist measurements
for (device in unique(threshold_results_filtered$device_type)) {
# First with neck size
device_data_neck <- threshold_results_filtered %>%
filter(device_type == device) %>%
inner_join(questionnaire_data %>% select(PID, Age, Q55), by = "PID")
# Then with wrist size if it's a bracelet
if (device == "bracelet") {
device_data_wrist <- threshold_results_filtered %>%
filter(device_type == device) %>%
inner_join(questionnaire_data %>% select(PID, Age, Q58), by = "PID")
}
cat("\n--- Multiple regression for", device, "device ---\n")
# Neck size + age
if (nrow(device_data_neck) > 5) {
cat("\nModel with age and neck size:\n")
model_neck <- lm(Threshold ~ Age + Q55, data = device_data_neck)
print(summary(model_neck))
# Calculate semi-partial correlations to assess unique contributions
cat("\nANOVA to assess unique contributions:\n")
print(Anova(model_neck, type = 2))
}
# Wrist size + age (only for bracelet)
if (device == "bracelet" && nrow(device_data_wrist) > 5) {
cat("\nModel with age and wrist size:\n")
model_wrist <- lm(Threshold ~ Age + Q58, data = device_data_wrist)
print(summary(model_wrist))
# Calculate semi-partial correlations
cat("\nANOVA to assess unique contributions:\n")
print(Anova(model_wrist, type = 2))
}
}
